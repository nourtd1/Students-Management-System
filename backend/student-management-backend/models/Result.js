const mongoose = require('mongoose'); const resultSchema = new mongoose.Schema({ studentId: { type: mongoose.Schema.Types.ObjectId, ref: 'Student', required: [true, 'L\'identifiant de l\'�tudiant est requis'] }, subject: { type: String, required: [true, 'La mati�re est requise'], trim: true }, examType: { type: String, required: [true, 'Le type d\'examen est requis'], enum: ['Contr�le continu', 'Examen partiel', 'Examen final', 'Rattrapage'], default: 'Examen final' }, score: { type: Number, required: [true, 'La note est requise'], min: [0, 'La note ne peut pas �tre inf�rieure � 0'], max: [20, 'La note ne peut pas �tre sup�rieure � 20'] }, coefficient: { type: Number, default: 1, min: [0.1, 'Le coefficient ne peut pas �tre inf�rieur � 0.1'] }, comments: { type: String, trim: true }, examDate: { type: Date, default: Date.now }, semester: { type: String, required: [true, 'Le semestre est requis'], enum: ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'S9', 'S10'] }, academicYear: { type: String, required: [true, 'L\'ann�e acad�mique est requise'], trim: true }, createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, createdAt: { type: Date, default: Date.now } }, { timestamps: true }); resultSchema.methods.getMention = function() { const score = this.score; if (score >= 16) return 'Tr�s bien'; if (score >= 14) return 'Bien'; if (score >= 12) return 'Assez bien'; if (score >= 10) return 'Passable'; return 'Insuffisant'; }; resultSchema.index({ studentId: 1, subject: 1, examType: 1, semester: 1, academicYear: 1 }, { unique: true }); const Result = mongoose.model('Result', resultSchema); module.exports = Result;
