const mongoose = require('mongoose'); const bcrypt = require('bcryptjs'); const userSchema = new mongoose.Schema({ email: { type: String, required: [true, 'L\'email est requis'], unique: true, trim: true, lowercase: true, match: [/^\S+@\S+\.\S+$/, 'Veuillez fournir un email valide'] }, password: { type: String, required: [true, 'Le mot de passe est requis'], minlength: [6, 'Le mot de passe doit contenir au moins 6 caract�res'] }, nom: { type: String, required: [true, 'Le nom est requis'], trim: true }, prenom: { type: String, required: [true, 'Le pr�nom est requis'], trim: true }, role: { type: String, enum: ['admin', 'user'], default: 'user' }, createdAt: { type: Date, default: Date.now }, lastLogin: { type: Date }, resetPasswordToken: String, resetPasswordExpire: Date }, { timestamps: true }); userSchema.pre('save', async function(next) { if (!this.isModified('password')) { return next(); } try { const salt = await bcrypt.genSalt(10); this.password = await bcrypt.hash(this.password, salt); next(); } catch (error) { next(error); } }); userSchema.methods.comparePassword = async function(candidatePassword) { return await bcrypt.compare(candidatePassword, this.password); }; const User = mongoose.model('User', userSchema); module.exports = User;
